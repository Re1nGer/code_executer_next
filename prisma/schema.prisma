// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Question {
  uid           String       @id @default(cuid())
  name          String
  category      String
  difficulty    Int
  prompt        String?
  scratchpads   Scratchpad[]
  solutions     Solution[]
  languages     Language[]
  users         User[]
  resources     Resource[]
  userQuestions UserQuestion[]
}

model Resource {
  id          Int      @id @default(autoincrement())
  archiveLink String
  templateCode String?
  language    Language @relation(fields: [languageId], references: [id])
  languageId  Int
  question    Question @relation(fields: [questionId], references: [uid])
  questionId  String
}


model Scratchpad {
  id         Int      @id @unique @default(autoincrement())
  text       String?
  question   Question @relation(fields: [questionId], references: [uid])
  questionId String
  user       User @relation(fields: [userId], references: [id])
  userId     String


  @@unique([questionId, userId])
}

model Solution {
  id         Int       @id @default(autoincrement())
  code       String?
  userId     String?
  question   Question? @relation(fields: [questionId], references: [uid])
  questionId String?
  language   Language? @relation(fields: [languageId], references: [id])
  languageId Int?
}

model UserQuestion {
  id      Int         @id @default(autoincrement())
  isComplete Boolean
  question   Question @relation(fields: [questionId], references: [uid])
  questionId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Language {
  id         Int       @id @default(autoincrement())
  question   Question[]
  name       String?
  solutionId Int?
  solutions  Solution[]
  resources  Resource[]
}

model User {
  id        String     @id @default(cuid())
  name      String?
  email     String?    @unique
  image     String?
  userQuestions UserQuestion[]
  emailVerified DateTime?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  questions     Question[]
  scratchpads   Scratchpad[]
  accounts      Account[]
  sessions      Session[]


  @@map(name: "users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

